name: Visual Regression Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      update_snapshots:
        description: 'Update visual snapshots'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        theme: [light, dark]
        device: [desktop, tablet, mobile]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Build application
        run: npm run build
        env:
          VITE_API_URL: http://localhost:3001
      
      - name: Start test servers
        run: |
          npm run dev:backend &
          npm run dev:frontend &
          sleep 30
        env:
          NODE_ENV: test
          DATABASE_URL: sqlite::memory:
          JWT_SECRET: test-secret
      
      - name: Wait for servers to be ready
        run: |
          npx wait-on http://localhost:3001/health
          npx wait-on http://localhost:5173
        timeout-minutes: 5
      
      - name: Run visual tests
        run: |
          npx playwright test \
            --project=visual-${{ matrix.browser }} \
            --grep="${{ matrix.theme }}.*${{ matrix.device }}" \
            ${{ github.event.inputs.update_snapshots == 'true' && '--update-snapshots' || '' }}
        env:
          PLAYWRIGHT_WORKERS: 1
          THEME: ${{ matrix.theme }}
          DEVICE: ${{ matrix.device }}
      
      - name: Upload visual test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-results-${{ matrix.browser }}-${{ matrix.theme }}-${{ matrix.device }}
          path: |
            test-results/
            e2e/visual/__screenshots__/
            playwright-report/
          retention-days: 30
      
      - name: Upload updated snapshots
        uses: actions/upload-artifact@v3
        if: github.event.inputs.update_snapshots == 'true'
        with:
          name: updated-snapshots-${{ matrix.browser }}-${{ matrix.theme }}-${{ matrix.device }}
          path: e2e/visual/__screenshots__/
          retention-days: 7

  visual-diff-report:
    name: Visual Diff Report
    runs-on: ubuntu-latest
    needs: visual-tests
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all visual test results
        uses: actions/download-artifact@v3
        with:
          path: visual-results/
      
      - name: Generate visual diff report
        run: |
          echo "# Visual Regression Test Results" > visual-report.md
          echo "" >> visual-report.md
          
          # Count total tests and failures
          total_tests=0
          failed_tests=0
          
          for result_dir in visual-results/visual-results-*; do
            if [ -d "$result_dir" ]; then
              browser=$(echo "$result_dir" | cut -d'-' -f4)
              theme=$(echo "$result_dir" | cut -d'-' -f5)
              device=$(echo "$result_dir" | cut -d'-' -f6)
              
              echo "## $browser - $theme - $device" >> visual-report.md
              
              if [ -f "$result_dir/test-results/results.json" ]; then
                # Parse test results (simplified)
                echo "- Tests completed" >> visual-report.md
                total_tests=$((total_tests + 1))
              else
                echo "- ❌ Tests failed" >> visual-report.md
                failed_tests=$((failed_tests + 1))
              fi
              
              # Check for visual diffs
              if [ -d "$result_dir/test-results" ]; then
                diff_count=$(find "$result_dir/test-results" -name "*-diff.png" | wc -l)
                if [ $diff_count -gt 0 ]; then
                  echo "- 🔍 $diff_count visual differences detected" >> visual-report.md
                  failed_tests=$((failed_tests + 1))
                else
                  echo "- ✅ No visual differences" >> visual-report.md
                fi
              fi
              
              echo "" >> visual-report.md
            fi
          done
          
          # Add summary
          echo "## Summary" >> visual-report.md
          echo "- Total test configurations: $total_tests" >> visual-report.md
          echo "- Failed configurations: $failed_tests" >> visual-report.md
          
          if [ $failed_tests -eq 0 ]; then
            echo "- 🎉 All visual tests passed!" >> visual-report.md
          else
            echo "- ⚠️ Some visual tests failed or detected differences" >> visual-report.md
          fi
      
      - name: Comment PR with visual test results
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('visual-report.md', 'utf8');
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('Visual Regression Test Results')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            }

  update-snapshots:
    name: Update Visual Snapshots
    runs-on: ubuntu-latest
    if: github.event.inputs.update_snapshots == 'true' && github.event_name == 'workflow_dispatch'
    needs: visual-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download updated snapshots
        uses: actions/download-artifact@v3
        with:
          path: updated-snapshots/
      
      - name: Update snapshots in repository
        run: |
          # Merge all updated snapshots
          for snapshot_dir in updated-snapshots/updated-snapshots-*; do
            if [ -d "$snapshot_dir" ]; then
              cp -r "$snapshot_dir"/* e2e/visual/__screenshots__/ || true
            fi
          done
      
      - name: Commit updated snapshots
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add e2e/visual/__screenshots__/
          git diff --staged --quiet || git commit -m "Update visual regression snapshots"
          git push

  performance-visual:
    name: Performance Visual Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      
      - name: Build application
        run: npm run build
      
      - name: Start test servers
        run: |
          npm run dev:backend &
          npm run dev:frontend &
          sleep 30
        env:
          NODE_ENV: production
      
      - name: Run Lighthouse with visual metrics
        run: |
          npm install -g @lhci/cli
          lhci autorun --config=.lighthouserc.json
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-visual-results
          path: .lighthouseci/
          retention-days: 30
